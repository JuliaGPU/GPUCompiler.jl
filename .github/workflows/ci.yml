name: CI
on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:
jobs:
  # released versions, downloaded as binaries
  binary_test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version: ['1.8', '1.9', '1.10.0-beta2']
        os: [ubuntu-latest, macOS-latest, windows-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info

  # development versions, built from source (with assertions enabled)
  source_test:
    name: Julia ${{ matrix.branch }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        branch: ['release-1.6', 'release-1.7', 'release-1.8', 'release-1.9', 'master']
        os: ['ubuntu-latest', 'macOS-latest', 'windows-latest']
        arch: [x64]
        exclude:
          # JuliaLang/julia#48081
          - branch: 'master'
            os: 'windows-latest'
            arch: 'x64'
          # hangs
          - branch: 'master'
            os: 'macOS-latest'
            arch: 'x64'
          # 1.6 requires gfortran, which isn't available on macOS runners
          - branch: 'release-1.6'
            os: 'macOS-latest'
            arch: 'x64'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: 'JuliaLang/julia'
          ref: ${{ matrix.branch }}
          path: 'julia'

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: mingw-w64-x86_64-gcc cmake diffutils git m4 make patch tar p7zip curl python
        if: runner.os == 'Windows'

      # compile Julia
      - name: Compile Julia
        run: |
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH
        if: runner.os != 'Windows'
      - name: Compile Julia (in msys2)
        shell: msys2 {0}
        run: |
          echo $PWD
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          # XXX: workaround for JuliaLang/julia#48081
          make -C julia/deps install-csl && \
          cp ${MINGW_PREFIX}/lib/libmsvcrt.a ./julia/usr/lib/libmsvcrt.a && \
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH
        if: runner.os == 'Windows'

      # set-up packages
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1

      - uses: julia-actions/julia-runtest@v1

      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info
