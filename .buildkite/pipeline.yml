steps:
  - label: "CUDA.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.develop(; name="CUDA")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("CUDA"; coverage=true)'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    soft_fail:
      - exit_status: 3

  - label: "oneAPI.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'using Pkg;

                println("--- :julia: Instantiating project")
                Pkg.develop(; path=pwd())
                Pkg.develop(; name="oneAPI")

                println("+++ :julia: Building support library")
                include(joinpath(Pkg.devdir(), "oneAPI", "deps", "build_ci.jl"))' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("oneAPI"; coverage=true)'
    agents:
      queue: "juliagpu"
      intel: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 60
    soft_fail:
      - exit_status: 3

  - label: "Metal.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.8
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.develop(; name="Metal")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("Metal"; coverage=true)'
    agents:
      queue: "juliaecosystem"
      os: "macos"
      arch: "aarch64"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    soft_fail:
      - exit_status: 3

#  - label: "AMDGPU.jl"
#    plugins:
#      - JuliaCI/julia#v1:
#          version: 1.6
#      - JuliaCI/julia-coverage#v1:
#          codecov: true
#    command: |
#       julia -e 'println("--- :julia: Instantiating project")
#                 using Pkg
#                 Pkg.develop(; path=pwd())
#                 Pkg.develop(; name="AMDGPU")' || exit 3
#
#       julia -e 'println("+++ :julia: Running tests")
#                 using Pkg
#                 Pkg.test("AMDGPU"; coverage=true)'
#    agents:
#      queue: "juliagpu"
#      rocm: "*"
#    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
#    timeout_in_minutes: 120
#    soft_fail:
#      - exit_status: 3

  - label: "Enzyme.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.develop(; name="Enzyme")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("Enzyme"; coverage=true)'
    agents:
      queue: "juliagpu"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 60
    soft_fail:
      - exit_status: 3

env:
  JULIA_PKG_SERVER: "" # it often struggles with our large artifacts
  SECRET_CODECOV_TOKEN: "ya+qhtTvHdnO/U1KSoTcdCRB4WCCFU7Or2wt7YlzSZJWqITbLxidDfvqxTMG0mPo6M9I2XW6GULCleA9okq06reF5//14WSmxiF8qPwBONj6m+ImdkLpju2FfLCAtISFJYRM5OJRdDuQ5hKz+FyNoDG/jWBm/vrHoXzrVOHpcHGOPvrEtSwkdo8ew0prFq5RTi6c0Pe+Vj+xRMH7o8QhIPisYUd4RWsA/BL3ukxqSSzpU1+ZJ4F5v6eZILSaKSPb04FzpotkbH+UUCvJSn28Cif+JQANJ9HDLgaa1BbSlOAcu7syktS2fJOyOTfE67er9Lu8utqz6973Evnqjfbclw==;U2FsdGVkX19sIzsESyU7ZuRndlTrQy67iOsrPzevxn+W/dWZBd3ds5Soh1ig5ivoUi4tLZrqUv/ZyPIHohVy0A=="
